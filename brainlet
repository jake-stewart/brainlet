#!/usr/bin/env python3

import sys
import textwrap
import shutil
import unicodedata
import argparse

def is_double_width(c):
    return unicodedata.east_asian_width(c) in ["F", "W"]

glyphs = {
    "A": [
        "╭─╮",
        "├─┤",
        "╵ ╵"
    ],
    # "A": [
    #     "╭─╮",
    #     "╭─┤",
    #     "╰─╯"
    # ],
    "B": [
        "┌╮ ",
        "├┴╮",
        "└─╯"
    ],
    # "B": [
    #     "╷  ",
    #     "├─╮",
    #     "└─╯"
    # ],
    "C": [
        "╭─╮",
        "│  ",
        "╰─╯"
    ],
    "D": [
        "┌─╮",
        "│ │",
        "└─╯"
    ],
    # "D": [
    #     "  ╷",
    #     "╭─┤",
    #     "╰─┘"
    # ],
    "E": [
        "╭─╴",
        "├─╴",
        "╰─╴"
    ],
    # "E": [
    #     "╭─╮",
    #     "├─┘",
    #     "╰─╯"
    # ],
    "F": [
        "╭─╴",
        "├─╴",
        "╵  "
    ],
    # "F": [
    #     " ╭─",
    #     "╶┼─",
    #     " ╵ "
    # ],
    "G": [
        "╭─╮",
        "│╶┐",
        "╰─╯"
    ],
    # "G": [
    #     "╭─╮",
    #     "╰─┤",
    #     "╰─╯"
    # ],
    "H": [
        "╷ ╷",
        "├─┤",
        "╵ ╵"
    ],
    # "H": [
    #     "╷  ",
    #     "├─╮",
    #     "╵ ╵"
    # ],
    "I": [
        "╶┬╴",
        " │ ",
        "╶┴╴"
    ],
    # "I": [
    #     " · ",
    #     "╶┐ ",
    #     "╶┴╴"
    # ],
    "J": [
        "  ╷",
        "  │",
        "╰─╯"
    ],
    # "J": [
    #     "  ·",
    #     "  │",
    #     "╰─╯"
    # ],
    "K": [
        "╷╭╴",
        "├┴╮",
        "╵ ╰"
    ],
    "L": [
        "╷  ",
        "│  ",
        "╰─╴"
    ],
    # "L": [
    #     "╶╮ ",
    #     " │ ",
    #     "╶┴╴"
    # ],
    "M": [
        "╭┬╮",
        "│││",
        "╵ ╵"
    ],
    "N": [
        "┌─╮",
        "│ │",
        "╵ ╵"
    ],
    # "N": [
    #     "┌╮╷",
    #     "│││",
    #     "╵└╯"
    # ],
    "O": [
        "╭─╮",
        "│ │",
        "╰─╯"
    ],
    "P": [
        "┌─╮",
        "├─╯",
        "╵  "
    ],
    "Q": [
        "╭─╮",
        "│╶┼",
        "╰─╯"
    ],
    # "Q": [
    #     "╭─┐",
    #     "╰─┤",
    #     "  ╰"
    # ],
    "R": [
        "┌─╮",
        "├┬╯",
        "╵╰╴"
    ],
    # "R": [
    #     "╭─╮",
    #     "│  ",
    #     "╵  "
    # ],
    "S": [
        "╭─╮",
        "╰─╮",
        "╰─╯"
    ],
    "T": [
        "╶┬╴",
        " │ ",
        " ╵ "
    ],
    # "T": [
    #     "╭┬╮",
    #     " │ ",
    #     " ╵ "
    # ],
    # "T": [
    #     " ╷ ",
    #     "╶┼╴",
    #     " ╰╴"
    # ],
    "U": [
        "╷ ╷",
        "│ │",
        "╰─╯"
    ],
    # "U": [
    #     "╷ ╷",
    #     "│ │",
    #     "╰─┘"
    # ],
    "V": [
        "╶╮╷",
        " ││",
        " ╰╯"
    ],
    "W": [
        "╷ ╷",
        "│││",
        "╰┴╯"
    ],
    "X": [
        "╭┬╮",
        " │ ",
        "╰┴╯"
    ],
    "Y": [
        "╷ ╷",
        "╰┬╯",
        " ╵ "
    ],
    # "Y": [
    #     "╷ ╷",
    #     "╰─┤",
    #     "╰─╯"
    # ],
    "Z": [
        "╶─╮",
        "╭─╯",
        "╰─╴"
    ],
    "1": [
        "╶┐ ",
        " │ ",
        "╶┴╴"
    ],
    "2": [
        "╶─╮",
        "╭─╯",
        "└─╴"
    ],
    "3": [
        "╶─╮",
        "╶─┤",
        "╶─╯"
    ],
    "4": [
        "╷ ╷",
        "╰─┤",
        "  ╵"
    ],
    "5": [
        "┌─╴",
        "╰─╮",
        "╰─╯"
    ],
    "6": [
        "╭─╮",
        "├─╮",
        "╰─╯"
    ],
    "7": [
        "╶─┐",
        "  │",
        "  ╵"
    ],
    # "7": [
    #     "╶─┐",
    #     "  ┼",
    #     "  ╵"
    # ],
    "8": [
        "╭─╮",
        "├─┤",
        "╰─╯"
    ],
    "9": [
        "╭─╮",
        "╰─┤",
        "╰─╯"
    ],
    "0": [
        "╭─╮",
        "│││",
        "╰─╯"
    ],
    "{": [
        " ╭╴",
        " ┤ ",
        " ╰╴"
    ],
    "}": [
        "╶╮ ",
        " ├ ",
        "╶╯ "
    ],
    "(": [
        " ╭╴",
        " │ ",
        " ╰╴"
    ],
    ")": [
        "╶╮ ",
        " │ ",
        "╶╯ "
    ],
    "[": [
        " ┌╴",
        " │ ",
        " └╴"
    ],
    "]": [
        "╶┐ ",
        " │ ",
        "╶┘ "
    ],
    "~": [
        "╭─╯",
        "   ",
        "   "
    ],
    "`": [
        " \\ ",
        "   ",
        "   "
    ],
    "'": [
        " ╷ ",
        "   ",
        "   "
    ],
    ".": [
        "   ",
        "   ",
        " · "
    ],
    ",": [
        "   ",
        "   ",
        " ╷ "
    ],
    ";": [
        "   ",
        " · ",
        " ╷ "
    ],
    ":": [
        "   ",
        " · ",
        " · "
    ],
    "-": [
        "   ",
        "╶─╴",
        "   "
    ],
    "+": [
        "   ",
        "╶┼╴",
        "   "
    ],
    "=": [
        "   ",
        "╶─╴",
        "╶─╴"
    ],
    "|": [
        " ╷ ",
        " │ ",
        " ╵ "
    ],
    '"': [
        " ╷╷",
        "   ",
        "   "
    ],
    "?": [
        "╭─╮",
        " ╭╯",
        " · "
    ],
    "!": [
        " ╷ ",
        " │ ",
        " · "
    ],
    "&": [
        "╭╮ ",
        "╭┼╯",
        "╰╯ "
    ],
    "$": [
        "╭┴╮",
        "╰─╮",
        "╰┬╯"
    ],
    # "%": [
    #     "╭╮╷",
    #     "╰┼╮",
    #     "╵╰╯"
    # ],
    "@": [
        "╭─╮",
        "├╮│",
        "╰╯╯"
    ],
    "^": [
        " ╭╮",
        "   ",
        "   "
    ],
    "#": [
        "┼─┼",
        "┼─┼",
        "   "
    ],
    "/": [
        "  ╱",
        " ╱ ",
        "╱  "
    ],
    "\\": [
        "╲  ",
        " ╲ ",
        "  ╲"
    ],
    "_": [
        "   ",
        "   ",
        "╶─╴"
    ],
}

def brainlet(s):
    output_buffers = [[], [], []]
    for letter in s:
        if not letter.isprintable():
            continue
        try:
            glyph_lines = glyphs[letter.upper()]

            for i, line in enumerate(glyph_lines):
                output_buffers[i].append(line)
        except KeyError:
            output_buffers[0].append("   ")
            if not is_double_width(letter):
                output_buffers[1].append(" ")
            output_buffers[1].append(letter)
            output_buffers[1].append(" ")
            output_buffers[2].append("   ")
    return output_buffers

def print_brainlet(s, width):
    if width:
        lines = textwrap.wrap(s, width)
    else:
        lines = [s]
    if len(lines):
        for line in lines:
            output_buffers = brainlet(line)
            for output_buffer in output_buffers:
                print("".join(output_buffer))
    else:
        print("\n\n")

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("text", nargs="*", help="the text to render")
    parser.add_argument("-w", "--width", type=int, help="number of chars until wrap, or zero for no wrapping")
    args = parser.parse_args(sys.argv[1:])

    width = None
    if args.width is not None:
        if args.width > 0:
            width = args.width
    else:
        if sys.stdout.isatty():
            bounds = shutil.get_terminal_size((-1, -1))
            if bounds.columns >= 3:
                width = bounds.columns // 3
            else:
                width = 80 // 3
        else:
            width = 80 // 3

    if len(args.text):
        print_brainlet(" ".join(args.text), width)
    else:
        try:
            for line in sys.stdin:
                if line.endswith("\n"):
                    line = line[:-1]
                print_brainlet(line, width)
        except EOFError:
            exit(0)
        except KeyboardInterrupt:
            print()
            exit(1)

if __name__ == "__main__":
    main()
